services:
  app:
    build:
      context: .            # Build from the current directory
      dockerfile: Dockerfile # Use the Dockerfile in the same directory
    image: laravel-app
    container_name: laravel-app
    volumes:
      - .:/var/www          # Mount the current directory to /var/www in the container
    depends_on:
      - mysql                # Ensure MySQL starts first, but doesn't guarantee it's ready
    networks:
      - laravel_default

  nginx:
    image: nginx:latest
    container_name: laravel-nginx
    ports:
      - "8000:80"           # Expose port 8000 on the host to port 80 on the container
    volumes:
      - .:/var/www          # Mount the current directory to /var/www in the container
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf  # Custom nginx config
    depends_on:
      - app                  # Wait for the app service to be ready
    networks:
      - laravel_default

  mysql:
    image: mysql:8.0
    container_name: laravel-mysql
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: laravel
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: laravel
      MYSQL_PASSWORD: secret
    ports:
      - "3308:3306"         # Changed to 3308:3306 to avoid conflict
    volumes:
      - dbdata:/var/lib/mysql # Persist data between container restarts
    networks:
      - laravel_default

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    restart: unless-stopped
    ports:
      - "8080:80"           # Expose phpMyAdmin interface on port 8080
    environment:
      PMA_HOST: mysql       # Connect phpMyAdmin to MySQL
      MYSQL_ROOT_PASSWORD: root
    depends_on:
      - mysql
    networks:
      - laravel_default

networks:
  laravel_default:
    driver: bridge

volumes:
  dbdata:                   # Declare the volume for MySQL data persistence